{"version":3,"sources":["components/Appbar.tsx","store/AppStore.ts","hooks/useStore.ts","components/users/user.tsx","components/page-loader.tsx","components/users/index.tsx","components/posts/post.tsx","components/posts/index.tsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","AppBar","color","Toolbar","Box","component","Typography","variant","AppStore","usersData","postsData","snackbarFlag","user","id","posts","name","postsDispFlag","pageLoaderFlag","flag","this","prop","value","postsDispFlagControl","pageLoaderFlagControl","fetch","resp","json","console","error","userControl","observables","observable","actions","getUsersData","action","getPostsData","decorate","AppStoreContext","React","createContext","useStore","useContext","useStyles","makeStyles","root","width","marginBottom","props","classes","email","website","phone","username","Card","className","CardContent","gutterBottom","CardActions","Button","onClick","a","useLoaderStyles","loaderGrid","minHeight","Grid","container","justify","alignItems","CircularProgress","size","thickness","useUsersStyles","typoHead","marginLeft","observer","mt","wrap","map","title","body","usePostsStyles","backButton","post","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5039b2c7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar, Box, Typography } from '@material-ui/core';\r\n\r\nconst NavBar = () => \r\n    <AppBar color=\"default\">\r\n        <Toolbar>\r\n            <Box component=\"span\">\r\n                <Typography variant=\"h6\">\r\n                    SAMPLE WEBPAGE\r\n                </Typography>\r\n            </Box>\r\n            <Box component=\"ul\">\r\n\r\n            </Box>\r\n        </Toolbar>\r\n    </AppBar>\r\n\r\n\r\nexport default NavBar;","import { observable, action, decorate } from 'mobx';\r\nimport React from 'react';\r\n\r\nclass AppStore {\r\n\r\n    usersData: Array<any> = [];\r\n    postsData: Array<any> = [];\r\n    snackbarFlag = false;\r\n    user: Record<string, string | number| null | Array<any>> = { id: null, posts: [], name: '' }\r\n    postsDispFlag = false;\r\n    pageLoaderFlag = false;\r\n\r\n    pageLoaderFlagControl(flag: boolean): void {\r\n        this.pageLoaderFlag = flag;\r\n    }\r\n    postsDispFlagControl(flag: boolean): void {\r\n        this.postsDispFlag = flag;\r\n    }\r\n    snackbarControl(flag: boolean): void {\r\n        this.snackbarFlag = flag;\r\n    }\r\n    userControl(prop: 'id' | 'posts' | 'name', value: string | number | Array<any>): void {\r\n        this.user[prop] = value;\r\n        if(prop === 'posts') this.postsDispFlagControl(true);\r\n    }\r\n    async getUsersData(): Promise<void> {\r\n        try {\r\n            this.pageLoaderFlagControl(true);\r\n            const resp = await fetch('https://jsonplaceholder.typicode.com/users');\r\n            this.usersData = await resp.json();\r\n            this.pageLoaderFlagControl(false);\r\n        } catch(err) {\r\n            console.error(err);\r\n            this.pageLoaderFlagControl(false);\r\n        }\r\n    }\r\n    async getPostsData(): Promise<void> {\r\n        try {\r\n            this.pageLoaderFlagControl(true);\r\n            const resp = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${this.user.id}`);\r\n            const posts = await resp.json()\r\n            this.userControl('posts', posts);\r\n            this.pageLoaderFlagControl(false);\r\n        } catch(err) {\r\n            console.error(err);\r\n            this.pageLoaderFlagControl(false);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst observables = {\r\n    usersData: observable,\r\n    postsData: observable,\r\n    user: observable,\r\n    postsDispFlag: observable,\r\n    pageLoaderFlag: observable,\r\n}\r\n\r\nconst actions = {\r\n    getUsersData: action,\r\n    getPostsData: action,\r\n}\r\n\r\nexport type $AppStore = AppStore;\r\n\r\ndecorate(AppStore, {\r\n    ...observables, ...actions\r\n});\r\n\r\nexport const AppStoreContext = React.createContext(new AppStore());","import React from 'react';\r\nimport {$AppStore, AppStoreContext} from '../store/AppStore';\r\n\r\nexport const useStore = (): $AppStore => \r\n    React.useContext(AppStoreContext);","import React from 'react';\r\nimport { Card, CardActions, Typography, CardContent, makeStyles, Button } from '@material-ui/core';\r\nimport { useStore } from '../../hooks';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 345,\r\n    marginBottom: '40px',\r\n  },\r\n});\r\n\r\nexport default (props: {\r\n    id: number,\r\n    name: string,\r\n    email: string,\r\n    website: string,\r\n    phone: string,\r\n    username: string,\r\n}): React.ReactElement => {\r\n  const classes = useStyles();\r\n  const AppStore = useStore();\r\n  const { id, name, email, website, phone, username } = props;\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {name}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            User Name: {username}\r\n            <br />\r\n            Email: {email}\r\n            <br />\r\n            Phone: {phone}\r\n            <br />\r\n            Website: {website}\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n            <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={async () =>{\r\n                AppStore.userControl('id', id);\r\n                AppStore.userControl('name', name);\r\n                await AppStore.getPostsData();\r\n            }}>\r\n                See posts\r\n            </Button>\r\n        </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Grid, CircularProgress, makeStyles } from '@material-ui/core';\r\n\r\nconst useLoaderStyles = makeStyles({\r\n    loaderGrid: {\r\n        minHeight: '100vh'\r\n    }\r\n});\r\n\r\nexport default () => {\r\n    const classes = useLoaderStyles();\r\n    return <Grid container justify=\"center\" alignItems=\"center\" className={classes.loaderGrid}>\r\n        <CircularProgress size=\"100px\" thickness={10} color=\"secondary\"/>\r\n    </Grid>\r\n}","import React from 'react';\r\nimport { Grid, Box, Typography, makeStyles } from '@material-ui/core';\r\nimport { useStore } from '../../hooks';\r\nimport User from './user';\r\nimport PageLoader from '../../components/page-loader';\r\nimport { observer } from 'mobx-react';\r\n\r\nconst useUsersStyles = makeStyles({\r\n    typoHead: {\r\n        marginLeft: '32px',\r\n        marginBottom: '20px',\r\n    }\r\n})\r\n\r\nconst Users = () => {\r\n    const AppStore = useStore();\r\n    const classes = useUsersStyles();\r\n    return (\r\n    AppStore.pageLoaderFlag ?\r\n        <PageLoader /> : \r\n        <Box component=\"div\" mt={14}>\r\n        <Typography variant=\"h3\" className={classes.typoHead}>\r\n            USERS\r\n        </Typography>\r\n        <Grid container justify=\"space-around\" wrap=\"wrap\">\r\n            {\r\n                AppStore?.usersData.map((user) => {\r\n                    const { id, name, email, phone, username, website } = user;\r\n                    return <User \r\n                        id={id}\r\n                        name={name}\r\n                        email={email}\r\n                        phone={phone}\r\n                        username={username}\r\n                        website={website} \r\n                    />\r\n                })\r\n            }\r\n        </Grid>\r\n    </Box>\r\n    );\r\n}\r\n\r\nexport default observer(Users);","import React from 'react';\r\nimport { Card, Typography, CardContent, makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 345,\r\n    marginBottom: '40px',\r\n  },\r\n});\r\n\r\nexport default (props: {\r\n    title: string,\r\n    body: string,\r\n}): React.ReactElement => {\r\n  const classes = useStyles();\r\n  const { title, body } = props;\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {title}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n           {body}\r\n          </Typography>\r\n        </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Grid, Box, Typography, makeStyles, Button } from '@material-ui/core';\r\nimport { observer } from 'mobx-react';\r\nimport { useStore } from '../../hooks';\r\nimport Post from './post';\r\nimport PageLoader from '../../components/page-loader';\r\n\r\nconst usePostsStyles = makeStyles({\r\n    typoHead: {\r\n        marginLeft: '32px',\r\n        marginBottom: '20px',\r\n    },\r\n    backButton: {\r\n        marginLeft: '32px',\r\n        marginBottom: '20px',\r\n    },\r\n});\r\n\r\nconst Posts = () => {\r\n    const AppStore = useStore();\r\n    const classes = usePostsStyles()\r\n    return (\r\n    AppStore.pageLoaderFlag ? \r\n    <PageLoader /> :\r\n    <Box component=\"div\" mt={14}>\r\n        <Button \r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={() => {\r\n            AppStore.postsDispFlagControl(false);\r\n        }}\r\n        className={classes.backButton}\r\n        >\r\n            Back\r\n        </Button>\r\n        <Typography variant=\"h3\" className={classes.typoHead}>\r\n            {AppStore.user.name}'s POSTS\r\n        </Typography>\r\n        <Grid container justify=\"space-around\" wrap=\"wrap\">\r\n            {\r\n                (AppStore?.user.posts as Array<any>).map((post) => {\r\n                    const { title, body } = post;\r\n                    return <Post title={title} body={body}/>\r\n                })\r\n            }\r\n        </Grid>\r\n    </Box>)\r\n}\r\n\r\nexport default observer(Posts);","import React, {useEffect} from 'react';\nimport NavBar from './components/Appbar.tsx';\nimport {useStore} from './hooks';\nimport Users from './components/users';\nimport Posts from './components/posts';\nimport { observer } from 'mobx-react';\n\nfunction App() {\n  const AppStore = useStore();\n  useEffect(() => {\n    AppStore.getUsersData();\n  });\n  return (\n    <div className=\"App\">\n      <NavBar />\n      { !AppStore.postsDispFlag ?\n        <Users /> :\n        <Posts />\n      }\n    </div>\n  );\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}